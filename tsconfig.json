{
  "compilerOptions": {
    "target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "moduleDetection": "auto" /* Control what method is used to detect module-format JS files. */,
    "module": "NodeNext" /* Specify what module code is generated. */,
    "rootDir": "./src" /* Specify the root folder within your source files. */,
    "moduleResolution": "NodeNext" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "./src" /* Specify the base directory to resolve non-relative module names. */,
    "rewriteRelativeImportExtensions": true /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */,
    "resolveJsonModule": true /* Enable importing .json files. */,
    "typeRoots": [
      "./src/types",
      "./node_modules/@types"
    ] /* Specify multiple folders that act like 'node_modules' for type lookup. */,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "outDir": "./dist/esm" /* Specify an output folder for all emitted files. */,
    "removeComments": true /* Disable emitting comments. */,
    "stripInternal": true /* Disable emitting declarations that have '@internal' in their JSDoc comments. */,
    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": true /* Enable all strict type-checking options. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "dist-cjs", "__test__", "coverage/**/*", "jest.config.ts", "dist/**/*"]
}
